###
## M5Stack atom S3 with display board powered by 12VDC/GND connection to 24VDC/GND from Brink, in combination with this base from m5stack:
## https://shop.m5stack.com/products/atomic-rs485-base
## NOTE: there are other RS485 boards from m5stack, these are not tested (like the tail-rs485)
#

esp32:
  board: m5stack-atoms3
  variant: esp32s3
  framework:
#    type: arduino
    type: esp-idf
    version: 5.1.1
    platform_version: 6.4.0

esphome:
  on_boot:
    - priority: 800
      then:
        - lambda: |-
            id(disp).enable();
            id(disp).transfer_byte(0x11);
            id(disp).disable();

# uart for Modbus RTU
uart:
  id: mod_bus
  baud_rate: 9600
  stop_bits: 1
  tx_pin: GPIO6
  rx_pin: GPIO5

# i2c for extra sensor
i2c:
  - id: bus_a
    sda: GPIO2
    scl: GPIO1

# Enable/Disable logging
logger:
  logs:
    modbus_controller.sensor: WARN
    modbus_controller.output: WARN
    modbus.number: WARN
    esp32.preferences: WARN
    sensor: WARN
    text_sensor: WARN
    dht.sensor: WARN
    switch: WARN
    button: WARN
    number: WARN

wifi:
  ap:
    ssid: "${name}"
    password: "configesp"

esp32_improv:
  authorizer: None 
      
captive_portal:

# Enable Web server.
web_server:
  port: 80

spi:
  clk_pin: GPIO17
  mosi_pin: GPIO21

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_gray
    red: 50%
    green: 50%
    blue: 50%

font:
  - file: "gfonts://Roboto"
    id: roboto_32
    size: 32
  - file: "gfonts://Roboto"
    id: roboto_24
    size: 24
  - file: "gfonts://Roboto"
    id: roboto_12
    size: 12

time:
  - platform: homeassistant
    id: esptime

display:
  - platform: st7789v # https://esphome.io/components/display/st7789v.html
    id: disp
    model: Custom
    backlight_pin: GPIO16
    cs_pin: GPIO15
    dc_pin: GPIO33
    reset_pin: GPIO34
    height: 128
    width: 128
#    rotation: 180
    offset_height: 2
    offset_width: 1
    eightbitcolor: true
    update_interval: 3s
    lambda: |-
      it.rectangle(0,  0, it.get_width(), it.get_height(), id(my_blue));
      it.rectangle(0, 20, it.get_width(), it.get_height(), id(my_blue));   // header bar

      // it.strftime((128 / 2), (128 / 3) * 1 + 5, id(roboto_24), id(my_gray), TextAlign::CENTER, "%Y-%m-%d", id(esptime).now());
      // it.print(5, 5, id(roboto_32), id(my_yellow), TextAlign::TOP_LEFT, id(salt_distance).state);


      // Comment out the above lines to see the image without text overlaid
      // it.image(0, 0, id(my_image));

      if (id(system_status).state) {
        it.print(115, 5, id(roboto_12), id(my_green), TextAlign::TOP_RIGHT, "Online");
      }
      else {
        it.print(115, 5, id(roboto_12), id(my_red), TextAlign::TOP_RIGHT, "Offline");
      }
    

#G41=Button
binary_sensor:
  - platform: status
    name: "Node Status"
    id: system_status
  - platform: gpio
    name: Button
    pin:
      number: GPIO41
      inverted: true
      mode:
        input: true
        pullup: true
    filters:
      - delayed_off: 10ms
    on_press:
      then:
        - logger.log: Button Pressed